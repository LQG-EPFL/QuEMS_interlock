{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is the QuEMS_Interlock? The QuEMS Intelock is a device to ensure the safety on an experiment and log important environmental parameters, like temperatures, laser powers, vacuum pressures, and so on. Its hardware is based on an raspberry pi with pi-plates cards . There are several important features that I would like to present here: Double safety by heartbeat relay Connection to devices via USB, Ethernet, AI, AO, DI, DO, K-type thermometers, Digital thermometers Web-based user interface implemented with REMI . Datalogging with Influxdb and Grafana . The code has been developed by the laboratory of quantum gases . Check our github page for other useful tools. GUI and Grafana The two ways to interact with the interlock are the gui and grafana. In the gui the outputs, trigger conditions can be set. Also the interlock warns the user acoustically if any issue was detected. This is realised by the test reading feature of standard browsers. The logged input and output values can be accessed through grafana.","title":"What is the QuEMS_Interlock?"},{"location":"#what-is-the-quems_interlock","text":"The QuEMS Intelock is a device to ensure the safety on an experiment and log important environmental parameters, like temperatures, laser powers, vacuum pressures, and so on. Its hardware is based on an raspberry pi with pi-plates cards . There are several important features that I would like to present here: Double safety by heartbeat relay Connection to devices via USB, Ethernet, AI, AO, DI, DO, K-type thermometers, Digital thermometers Web-based user interface implemented with REMI . Datalogging with Influxdb and Grafana . The code has been developed by the laboratory of quantum gases . Check our github page for other useful tools.","title":"What is the QuEMS_Interlock?"},{"location":"#gui-and-grafana","text":"The two ways to interact with the interlock are the gui and grafana. In the gui the outputs, trigger conditions can be set. Also the interlock warns the user acoustically if any issue was detected. This is realised by the test reading feature of standard browsers. The logged input and output values can be accessed through grafana.","title":"GUI and Grafana"},{"location":"grafana/","text":"Installation Download The Analysis Plot Panel is though to be used as a single shot routine in lyse. In order to set this up, one first has to clone the git into the folder where all the analysis scripts are stored (usually: C:\\Users\\user_name\\labscript-suite\\userlib\\analysislib\\experiment_name ), where user_name and experiment_name have to be changed individually. Additional packages required The analysis plot panel requires the following packages: lyse : Installed with the labscript suite pyqt5 : Installed with the labscript suite pyqtgraph : Installed with the labscript suite h5py : Installed with the labscript suite sortedcontainers : pip install sortedcontainers Warning All these packages should be installed in the correct python environment. Check the installation guide of labscript for more details. Setup of lyse As a last step, the analysis_plot_panel_lyse_routine.py file should be loaded as a single shot routine in lyse:","title":"Grafana"},{"location":"grafana/#installation","text":"","title":"Installation"},{"location":"grafana/#download","text":"The Analysis Plot Panel is though to be used as a single shot routine in lyse. In order to set this up, one first has to clone the git into the folder where all the analysis scripts are stored (usually: C:\\Users\\user_name\\labscript-suite\\userlib\\analysislib\\experiment_name ), where user_name and experiment_name have to be changed individually.","title":"Download"},{"location":"grafana/#additional-packages-required","text":"The analysis plot panel requires the following packages: lyse : Installed with the labscript suite pyqt5 : Installed with the labscript suite pyqtgraph : Installed with the labscript suite h5py : Installed with the labscript suite sortedcontainers : pip install sortedcontainers Warning All these packages should be installed in the correct python environment. Check the installation guide of labscript for more details.","title":"Additional packages required"},{"location":"grafana/#setup-of-lyse","text":"As a last step, the analysis_plot_panel_lyse_routine.py file should be loaded as a single shot routine in lyse:","title":"Setup of lyse"},{"location":"hardware/","text":"Hardware layout The hardware of the interlock system is based on an raspberry pi with pi-plates cards . The pi-plates are connected to the raspberry pi via the GPIO ports. This assembly is mounted on a DIN-rail inside a plastic switch cabinet. On the cabinet, there is a touch screen mounted that allows the user to interact with the GUI. Inside the Interlock box The whole assembly is powered by a 5V/6A power supply. The power is than wired through the heartbeat relay to the raspberry pi. Heartbeat safety relay The heartbeat relay WZR-1.pdf (relmatic.ch) is a simple device that takes a TTL signal as an input. If the input signal doesn't flip during a predefined time, the heartbeat relay with switch, leading to a complete shutdown of the interlock. The software of the interlock is designed in a way that one of the digital outputs of the pi-plates card switches state whenever one cycle of checking all the inputs has been performed. If, out of whatever reason the raspberry pi get stuck and doesn't perform regular checks (about once per second) of the import values, the heartbeat relay will trigger and cut the power to the entire interlock and therefore switching down all of the connected devices. The staircase relay is used to bypass the heartbeat relay for a short period of time. This allows the interlock to restart. Raspberry pi with pi-plates The core of the interlock device is a raspberry pi 4B paired with several pi-plates. Currently, we are using 2 DAQC2plates and 1 THERMOplate . Like this we have 8x K-type thermometer inputs, 4x digital thermometer inputs 16x digital inputs 16x digital outputs 16x 16 bit analog inputs 8x 12 bit analog outputs 4x 10 bit pwm outputs This allows us to have more than enough connectivity to control our devices in the lab. Switching relays In order to switch other devices, like the lasers, power supplies, laser warning sign, ... , we use solid state relays. This could of course also me done with mechanical relays. Input-Output connectors The inputs and outputs of the interlock are connected using two different types of connectors. Either we used BNC connectors or DIN rail feed-through terminal blocks.","title":"Hardware Setup"},{"location":"hardware/#hardware-layout","text":"The hardware of the interlock system is based on an raspberry pi with pi-plates cards . The pi-plates are connected to the raspberry pi via the GPIO ports. This assembly is mounted on a DIN-rail inside a plastic switch cabinet. On the cabinet, there is a touch screen mounted that allows the user to interact with the GUI.","title":"Hardware layout"},{"location":"hardware/#inside-the-interlock-box","text":"The whole assembly is powered by a 5V/6A power supply. The power is than wired through the heartbeat relay to the raspberry pi.","title":"Inside the Interlock box"},{"location":"hardware/#heartbeat-safety-relay","text":"The heartbeat relay WZR-1.pdf (relmatic.ch) is a simple device that takes a TTL signal as an input. If the input signal doesn't flip during a predefined time, the heartbeat relay with switch, leading to a complete shutdown of the interlock. The software of the interlock is designed in a way that one of the digital outputs of the pi-plates card switches state whenever one cycle of checking all the inputs has been performed. If, out of whatever reason the raspberry pi get stuck and doesn't perform regular checks (about once per second) of the import values, the heartbeat relay will trigger and cut the power to the entire interlock and therefore switching down all of the connected devices. The staircase relay is used to bypass the heartbeat relay for a short period of time. This allows the interlock to restart.","title":"Heartbeat safety relay"},{"location":"hardware/#raspberry-pi-with-pi-plates","text":"The core of the interlock device is a raspberry pi 4B paired with several pi-plates. Currently, we are using 2 DAQC2plates and 1 THERMOplate . Like this we have 8x K-type thermometer inputs, 4x digital thermometer inputs 16x digital inputs 16x digital outputs 16x 16 bit analog inputs 8x 12 bit analog outputs 4x 10 bit pwm outputs This allows us to have more than enough connectivity to control our devices in the lab.","title":"Raspberry pi with pi-plates"},{"location":"hardware/#switching-relays","text":"In order to switch other devices, like the lasers, power supplies, laser warning sign, ... , we use solid state relays. This could of course also me done with mechanical relays.","title":"Switching relays"},{"location":"hardware/#input-output-connectors","text":"The inputs and outputs of the interlock are connected using two different types of connectors. Either we used BNC connectors or DIN rail feed-through terminal blocks.","title":"Input-Output connectors"},{"location":"installation/","text":"Installation For the installation of the QuEMS_interlock, one has to install software on the raspberry pi and another computer (data server) that is used for data storage (influxDB and grafana). Setup on Raspberry pi Install the necessary python packages make sure that the rpi has a connection to the internet during the following steps: REMI git clone https://github.com/dddomodossola/remi cd remi sudo python3 setup.py install cd .. influxdb sudo pip3 install influxdb pi-plates enable spi as described here: https://pi-plates.com/getting_started/ sudo pip3 install pi-plates psutils sudo pip3 install psutil clone QuEMS_interlock git clone https://c4science.ch/source/QuEMS_interlock.git Adjust the code in interlock.py to fit your configuration of influxdb: dbClient = InfluxDBClient('192.168.0.1', 8086, 'root', 'root', 'mydb', timeout = 0.1) Adjust the main.py for your needs. This means connect you devices and configure the correct folders for configs and values. place your old config files in ./QuEMS_interlock/config test the interlock by running python3 main.py Setup of launcher on rasperry pi mkdir ./logs Add the following line to crontab -e: @reboot sh /home/pi/QuEMS_interlock/launch_interlock.sh >/home/pi/logs/cronlog 2>&1 To state the pi in kiosk mode add: @chromium-browser --start-fullscreen http://localhost:10000 to /etc/xdg/lxsession/LXDE-pi/autostart Touchscreen setup If you want to use a touchscreen with the pi you can install the following: sudo apt-get install at-spi2-core sudo apt-get install florence Setup on data server install docker from https://www.docker.com/ download influxDB make c shared drive of docker https://stackoverflow.com/questions/56797665/error-response-from-daemon-drive-has-not-been-shared docker pull influxdb docker run -d --name=influxdb -p 8086:8086 --volume \"C:/Users/admin/influxdb:/var/lib/influxdb\" influxdb curl http://localhost:8086/query --data-urlencode 'q=CREATE DATABASE \"mydb\"' test database curl -i -XPOST \"http://localhost:8086/write?db=mydb\" --data-binary 'myvar,mytag=1 myfield=90 1549412796' download grafana/grafana docker pull grafana/grafana docker run -d --name=grafana -p 3000:3000 --volume \"C:/Users/admin/graphana:/var/lib/grafana\" --link influxdb grafana/grafana link database to http://influxdb:8086 and set database name to mydb if docker stopped it can be restarted with docker restart container Warning Make sure that you have made all the firewall exceptions for port 3000 (influxdb), 10000 (QuEMS_interlock), 8086 (Grafana). For other computers make port forwarding netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=10000 connectaddress=192.168.0.4 connectport=10000","title":"Installation"},{"location":"installation/#installation","text":"For the installation of the QuEMS_interlock, one has to install software on the raspberry pi and another computer (data server) that is used for data storage (influxDB and grafana).","title":"Installation"},{"location":"installation/#setup-on-raspberry-pi","text":"","title":"Setup on Raspberry pi"},{"location":"installation/#install-the-necessary-python-packages","text":"make sure that the rpi has a connection to the internet during the following steps:","title":"Install the necessary python packages"},{"location":"installation/#remi","text":"git clone https://github.com/dddomodossola/remi cd remi sudo python3 setup.py install cd ..","title":"REMI"},{"location":"installation/#influxdb","text":"sudo pip3 install influxdb","title":"influxdb"},{"location":"installation/#pi-plates","text":"enable spi as described here: https://pi-plates.com/getting_started/ sudo pip3 install pi-plates","title":"pi-plates"},{"location":"installation/#psutils","text":"sudo pip3 install psutil","title":"psutils"},{"location":"installation/#clone-quems_interlock","text":"git clone https://c4science.ch/source/QuEMS_interlock.git Adjust the code in interlock.py to fit your configuration of influxdb: dbClient = InfluxDBClient('192.168.0.1', 8086, 'root', 'root', 'mydb', timeout = 0.1) Adjust the main.py for your needs. This means connect you devices and configure the correct folders for configs and values. place your old config files in ./QuEMS_interlock/config test the interlock by running python3 main.py","title":"clone QuEMS_interlock"},{"location":"installation/#setup-of-launcher-on-rasperry-pi","text":"mkdir ./logs Add the following line to crontab -e: @reboot sh /home/pi/QuEMS_interlock/launch_interlock.sh >/home/pi/logs/cronlog 2>&1 To state the pi in kiosk mode add: @chromium-browser --start-fullscreen http://localhost:10000 to /etc/xdg/lxsession/LXDE-pi/autostart","title":"Setup of launcher on rasperry pi"},{"location":"installation/#touchscreen-setup","text":"If you want to use a touchscreen with the pi you can install the following: sudo apt-get install at-spi2-core sudo apt-get install florence","title":"Touchscreen setup"},{"location":"installation/#setup-on-data-server","text":"install docker from https://www.docker.com/","title":"Setup on data server"},{"location":"installation/#download-influxdb","text":"make c shared drive of docker https://stackoverflow.com/questions/56797665/error-response-from-daemon-drive-has-not-been-shared docker pull influxdb docker run -d --name=influxdb -p 8086:8086 --volume \"C:/Users/admin/influxdb:/var/lib/influxdb\" influxdb curl http://localhost:8086/query --data-urlencode 'q=CREATE DATABASE \"mydb\"'","title":"download influxDB"},{"location":"installation/#test-database","text":"curl -i -XPOST \"http://localhost:8086/write?db=mydb\" --data-binary 'myvar,mytag=1 myfield=90 1549412796'","title":"test database"},{"location":"installation/#download-grafanagrafana","text":"docker pull grafana/grafana docker run -d --name=grafana -p 3000:3000 --volume \"C:/Users/admin/graphana:/var/lib/grafana\" --link influxdb grafana/grafana link database to http://influxdb:8086 and set database name to mydb if docker stopped it can be restarted with docker restart container Warning Make sure that you have made all the firewall exceptions for port 3000 (influxdb), 10000 (QuEMS_interlock), 8086 (Grafana).","title":"download grafana/grafana"},{"location":"installation/#for-other-computers-make-port-forwarding","text":"netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=10000 connectaddress=192.168.0.4 connectport=10000","title":"For other computers make port forwarding"},{"location":"software/","text":"Structure of QuEMS Interlock software The interlock software can be divided in three parts, the interlock class, the REMI based GUI which are running on the raspberry pi and the influxDB+grafana running on the experiment server. All the user interfaces are web-based which allows the user to access the software from many different devices. The diagram below illustrates the structure of the interlock code. The central piece of the software is the Interlock class. It can read all the inputs and control all the outputs. Once the interlock is stated, a thread in the interlock class loops over three different steps: Check if all triggers on the inputs are fine (for example: Check if coil temperatures are in bounds) If a problem has been detected, the interlock will trigger and the outputs will be set to their triggered value. The heartbeat signal is send Whenever an input value is read or an output value is set, the data is sent to the GUI and the influxDB database. It is important to note that the interlock class is totally independent from the GUI. The communications are done with a try and expect. This ensures that communication issues will not lead to a crash of the system.","title":"Structure of QuEMS Interlock software"},{"location":"software/#structure-of-quems-interlock-software","text":"The interlock software can be divided in three parts, the interlock class, the REMI based GUI which are running on the raspberry pi and the influxDB+grafana running on the experiment server. All the user interfaces are web-based which allows the user to access the software from many different devices. The diagram below illustrates the structure of the interlock code. The central piece of the software is the Interlock class. It can read all the inputs and control all the outputs. Once the interlock is stated, a thread in the interlock class loops over three different steps: Check if all triggers on the inputs are fine (for example: Check if coil temperatures are in bounds) If a problem has been detected, the interlock will trigger and the outputs will be set to their triggered value. The heartbeat signal is send Whenever an input value is read or an output value is set, the data is sent to the GUI and the influxDB database. It is important to note that the interlock class is totally independent from the GUI. The communications are done with a try and expect. This ensures that communication issues will not lead to a crash of the system.","title":"Structure of QuEMS Interlock software"}]}